user www-data;
worker_processes auto;
pid /run/nginx.pid;

# Also set
# /etc/security/limits.conf
#   web soft nofile 65535
#   web hard nofile 65535
# /etc/default/nginx
#       ULIMIT="-n 65535"
worker_rlimit_nofile 65535;

include /etc/nginx/modules-enabled/*.conf;
include /etc/nginx/modules/*.conf;

events {
    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # Should be equal to `ulimit -n / worker_processes`
    worker_connections 10240;

    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that option is set too low.
    multi_accept on;

    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    use epoll;
}

http {
    ##
    # Basic Settings
    ##

    # Override some buffer limitations, will prevent DDOS too.
    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;

    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout   32;
    client_header_timeout 32;

    # Every 60 seconds server broadcasts Sync packets, so 90 is a conservative upper bound.
    keepalive_timeout 90; # default 65
    send_timeout 120;     # default 60

    # Allow the server to close the connection after a client stops responding.
    # Frees up socket-associated memory.
    reset_timedout_connection on;

    # Open file descriptors.
    # Caches information about open FDs, freqently accessed files.
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring
    # data to and from the user space.
    sendfile on;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
    # packet, instead of using partial frames. This is useful for prepending
    # headers before calling sendfile, or for throughput optimization.
    tcp_nopush on;

    # don't buffer data-sends (disable Nagle algorithm). Good for sending
    # frequent small bursts of data in real time.)
    tcp_nodelay on;

    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Security Settings
    ##

    server_tokens off;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable "MSIE [1-6]\.";
    gzip_proxied expired no-cache no-store private auth;
    # Default is 6 (1<n<9), but 2 -- even 1 -- is enough. The higher it is, the
    # more CPU cycles will be wasted.
    gzip_comp_level 9;
    gzip_min_length 500; # Default 20
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

##
# Virtual Host Configs
##

include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*;
}


stream {
    log_format proxy '$remote_addr [$time_local] '
        '$protocol $status $bytes_sent $bytes_received '
        '$session_time "$upstream_addr" '
        '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    include /etc/nginx/sites-stream/*;
}
